// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Refit;
using Storage.Contracts.v1.Responses;
using StrorageRestApi.Contracts.v1.Requests;
using StrorageRestApi.Contracts.v1.Responses;
using System.Text;
using System.Threading.Tasks;
using Storage.Contracts.v1.Requests;
using Storage.Contracts.v1.Requests.Queries;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Storage.sdk.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Storage.sdk
{
    using Storage.sdk.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIIdentityApi : IIdentityApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIIdentityApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthSuccessResponse>> IIdentityApi.RegisterAsync(UserRegistrationRequest registrationRequest)
        {
            var arguments = new object[] { registrationRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("RegisterAsync", new Type[] { typeof(UserRegistrationRequest) });
            return (Task<ApiResponse<AuthSuccessResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthSuccessResponse>> IIdentityApi.LoginAsync(UserLoginRequest loginRequest)
        {
            var arguments = new object[] { loginRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("LoginAsync", new Type[] { typeof(UserLoginRequest) });
            return (Task<ApiResponse<AuthSuccessResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthSuccessResponse>> IIdentityApi.RefreshAsync(RefreshTokenRequest refreshRequest)
        {
            var arguments = new object[] { refreshRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("RefreshAsync", new Type[] { typeof(RefreshTokenRequest) });
            return (Task<ApiResponse<AuthSuccessResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<UserInfoResponse>> IIdentityApi.GetUserInfoAsync(string token)
        {
            var arguments = new object[] { token };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserInfoAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<UserInfoResponse>>)func(Client, arguments);
        }
    }
}

namespace Storage.sdk
{
    using Storage.sdk.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStorageApi : IStorageApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStorageApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<PagedResponse<ProductTypeResponse>>> IStorageApi.GetAllAsync(PaginationQuery paginationQuery)
        {
            var arguments = new object[] { paginationQuery };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllAsync", new Type[] { typeof(PaginationQuery) });
            return (Task<ApiResponse<PagedResponse<ProductTypeResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<ProductTypeResponse>> IStorageApi.GetAsync(string productTypeName)
        {
            var arguments = new object[] { productTypeName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<ProductTypeResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<ProductTypeResponse>> IStorageApi.CreateAsync(CreateProductTypeRequest createProductTypeRequest)
        {
            var arguments = new object[] { createProductTypeRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateAsync", new Type[] { typeof(CreateProductTypeRequest) });
            return (Task<ApiResponse<ProductTypeResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<ProductTypeResponse>> IStorageApi.UpdateAsync(string productTypeId, UpdateProductTypeRequest updateProductTypeRequest)
        {
            var arguments = new object[] { productTypeId, updateProductTypeRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateAsync", new Type[] { typeof(string), typeof(UpdateProductTypeRequest) });
            return (Task<ApiResponse<ProductTypeResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<string>> IStorageApi.DeleteAsync(string productTypeId)
        {
            var arguments = new object[] { productTypeId };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<string>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PagedResponse<ProductResponse>>> IStorageApi.GetAllProductByTypeAsync(string productTypeId, PaginationQuery paginationQuery)
        {
            var arguments = new object[] { productTypeId, paginationQuery };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllProductByTypeAsync", new Type[] { typeof(string), typeof(PaginationQuery) });
            return (Task<ApiResponse<PagedResponse<ProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<ProductResponse>> IStorageApi.GetProductAsync(string productName)
        {
            var arguments = new object[] { productName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetProductAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<ProductResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<ProductResponse>> IStorageApi.CreateProductAsync(CreateProductRequest createProductRequest)
        {
            var arguments = new object[] { createProductRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateProductAsync", new Type[] { typeof(CreateProductRequest) });
            return (Task<ApiResponse<ProductResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<ProductResponse>> IStorageApi.UpdateProductAsync(string productId, UpdateProductRequest updateProductRequest)
        {
            var arguments = new object[] { productId, updateProductRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateProductAsync", new Type[] { typeof(string), typeof(UpdateProductRequest) });
            return (Task<ApiResponse<ProductResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<string>> IStorageApi.DeleteProductAsync(string productId)
        {
            var arguments = new object[] { productId };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteProductAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<string>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PagedResponse<BillResponse>>> IStorageApi.GetBillsByTypeAsync(string billTypeId, PaginationQuery paginationQuery)
        {
            var arguments = new object[] { billTypeId, paginationQuery };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBillsByTypeAsync", new Type[] { typeof(string), typeof(PaginationQuery) });
            return (Task<ApiResponse<PagedResponse<BillResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PagedResponse<BillResponse>>> IStorageApi.GetBillsByDateAsync(string date, PaginationQuery paginationQuery)
        {
            var arguments = new object[] { date, paginationQuery };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBillsByDateAsync", new Type[] { typeof(string), typeof(PaginationQuery) });
            return (Task<ApiResponse<PagedResponse<BillResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<BillResponse>> IStorageApi.CreateBillAsync(CreateBillRequest billRequest)
        {
            var arguments = new object[] { billRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateBillAsync", new Type[] { typeof(CreateBillRequest) });
            return (Task<ApiResponse<BillResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<BillDetailResponse>> IStorageApi.CreateBillDetailAsync(CreateBillDetailRequest billDetailRequest)
        {
            var arguments = new object[] { billDetailRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateBillDetailAsync", new Type[] { typeof(CreateBillDetailRequest) });
            return (Task<ApiResponse<BillDetailResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PagedResponse<BillDetailResponse>>> IStorageApi.GetBillDetailsByBillIdAsync(string billId, PaginationQuery paginationQuery)
        {
            var arguments = new object[] { billId, paginationQuery };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBillDetailsByBillIdAsync", new Type[] { typeof(string), typeof(PaginationQuery) });
            return (Task<ApiResponse<PagedResponse<BillDetailResponse>>>)func(Client, arguments);
        }
    }
}
